================================================================================
try
================================================================================

try do
  do_something_that_may_fail(some_arg)
rescue
  ArgumentError ->
    IO.puts("Invalid argument given")
catch
  value ->
    IO.puts("Caught #{inspect(value)}")
else
  value ->
    IO.puts("Success! The result was #{inspect(value)}")
after
  IO.puts("This is printed regardless if it failed or succeeded")
end

--------------------------------------------------------------------------------

(source_file
  (statement
    (expr
      (call
        (identifier)
        (do_block
          (expr
            (qualified_call
              (identifier)
              (args
                (expr
                  (identifier)))))
          (rescue_block
            (stab_expr
              (expr
                (module))
              (expr
                (dot_call
                  (module)
                  (identifier)
                  (args
                    (expr
                      (string
                        (string_start)
                        (string_content)
                        (string_end))))))))
          (catch_block
            (stab_expr
              (expr
                (identifier))
              (expr
                (dot_call
                  (module)
                  (identifier)
                  (args
                    (expr
                      (string
                        (string_start)
                        (string_content)
                        (interpolation
                          (expr
                            (qualified_call
                              (identifier)
                              (args
                                (expr
                                  (identifier))))))
                        (string_end))))))))
          (else_block
            (stab_expr
              (expr
                (identifier))
              (expr
                (dot_call
                  (module)
                  (identifier)
                  (args
                    (expr
                      (string
                        (string_start)
                        (string_content)
                        (interpolation
                          (expr
                            (qualified_call
                              (identifier)
                              (args
                                (expr
                                  (identifier))))))
                        (string_end))))))))
          (after_block
            (expr
              (dot_call
                (module)
                (identifier)
                (args
                  (expr
                    (string
                      (string_start)
                      (string_content)
                      (string_end))))))))))))

================================================================================
try with rescue only
================================================================================

try do
  UndefinedModule.undefined_function
rescue
  x in [UndefinedFunctionError] -> nil
end

--------------------------------------------------------------------------------

(source_file
  (statement
    (expr
      (call
        (identifier)
        (do_block
          (expr
            (dot_call
              (module)
              (identifier)))
          (rescue_block
            (stab_expr
              (expr
                (binary_op
                  (expr
                    (identifier))
                  (expr
                    (list
                      (expr
                        (module))))))
              (expr
                (literal)))))))))

================================================================================
try catch
================================================================================

try do
  exit(:shutdown)
catch
  :exit, value ->
    IO.puts("Exited with value #{inspect(value)}")
end

--------------------------------------------------------------------------------

(source_file
  (statement
    (expr
      (call
        (identifier)
        (do_block
          (expr
            (qualified_call
              (identifier)
              (args
                (expr
                  (atom)))))
          (catch_block
            (stab_expr
              (expr
                (atom))
              (expr
                (identifier))
              (expr
                (dot_call
                  (module)
                  (identifier)
                  (args
                    (expr
                      (string
                        (string_start)
                        (string_content)
                        (interpolation
                          (expr
                            (qualified_call
                              (identifier)
                              (args
                                (expr
                                  (identifier))))))
                        (string_end)))))))))))))

================================================================================
try rescue else
================================================================================

try do
  1 / x
rescue
  ArithmeticError ->
    :infinity
else
  y when y < 1 and y > 5 ->
    :small
  _ ->
    :large
end

--------------------------------------------------------------------------------

(source_file
  (statement
    (expr
      (call
        (identifier)
        (do_block
          (expr
            (binary_op
              (expr
                (integer))
              (expr
                (identifier))))
          (rescue_block
            (stab_expr
              (expr
                (module))
              (expr
                (atom))))
          (else_block
            (stab_expr
              (expr
                (binary_op
                  (expr
                    (identifier))
                  (expr
                    (binary_op
                      (expr
                        (binary_op
                          (expr
                            (identifier))
                          (expr
                            (integer))))
                      (expr
                        (binary_op
                          (expr
                            (identifier))
                          (expr
                            (integer))))))))
              (expr
                (atom)))
            (stab_expr
              (expr
                (identifier))
              (expr
                (atom)))))))))

================================================================================
try after
================================================================================

try do
  do_something_with("tmp/story.txt")
after
  File.rm("tmp/story.txt")
end

--------------------------------------------------------------------------------

(source_file
  (statement
    (expr
      (call
        (identifier)
        (do_block
          (expr
            (qualified_call
              (identifier)
              (args
                (expr
                  (string
                    (string_start)
                    (string_content)
                    (string_end))))))
          (after_block
            (expr
              (dot_call
                (module)
                (identifier)
                (args
                  (expr
                    (string
                      (string_start)
                      (string_content)
                      (string_end))))))))))))
